---
layout: post
title:  "寻找重复的数"
date:   2017-11-05 10:10:00
categories: [algorithm , leetcode]
tags: [algorithm , leetcode]
---

# 寻找重复的数类型题目

## 对于只有唯一的一个重复的数：
题目要求：
假设你有一个用1001个整数组成的数组，这些整数是任意排列的，但是你知道所有的整数都在1到1000(包括1000)之间。
此外，除一个数字出现两次外，其他所有数字只出现一次。假设你只能对这个数组做一次处理，用一种算法找出重复的那个数字。

关键点：利用异或

解题思路：
数组中的1001个数相互异或的结果与（1-1000）相互异或的结果再做异或，得出的值即位所求
原理：
假设重复数为A，其余999个数相互异或结果为B。
那么1-1000异或结果为A^B；
1001个数异或结果为A^(A^B) 。
由于异或满足交换律和结合律，且X^X = 0， 0^X = X；
则有：A^(A^B)  = B ；(A^B)^B=A。
A即为所求。

```
public static void find(int[] arr, int n){  
    int result = 0;  
    for(int i=0 ; i<n+1; i++){  
        result ^= arr[i];  
        result ^= i;  
    }  
    System.out.println("找到重复的数为："+result);  
}
```

## 出现三次
题目要求:
一个整形数组中，每个数字都出现三次，只有一个数字出现一次，找出这个数字。

解题思路：
这个问题显然不能再用异或求解了，因为三个数字异或之后不能消除。
考虑到整形数字在电脑中存储的时候是四个byte，即32位bit，每一个数字都可以表示成一个32位的0 1 串，那么如果用一个32位的数组，记录数组中所有数字，每一位1出现的次数。然后每一位对3取余，数组中不为0的地方就是那一个只出现一次的数字的二进制中1的位置。

例如4出现3次。 4的二进制是 0000 0000 0000 0000 0000 0000 0000 0100 4出现三次的话，
统计的数组就把 数组中的第三位记为3，
即 数组为 0000 0000 0000 0000 0000 0000 0000 0300
所有位对3取余，结果一定全为0。

```
public static   int singleNumber(int[] A) {
    int bits[] = new int[32]; //定义一个32位数组       
    for (int i = 0; i < bits.length; i++) {
        bits[i]=0;            //初始化  数组中所有值为0
    }            
    for (int i = 0; i < A.length; i++) {        //对数组中每一个数字                    
        for (int j = 0; j < bits.length; j++) {    //这个数字的每一位            
            bits[j] += ((A[i] >> j) & 1);        //记录这个位上是否为1，为1的话 bits数组就加1        
        }
    }              
    int result = 0 ;               
    for (int j = 0; j < 32; j++)                  
        if (bits[j] % 3 != 0)          //对3取余，是3的倍数的取余后都为0，剩下的就是我们要的
          result += (1 << j);       //把记录的二进制他转化成整形数字       
    return result;
}
```

## 时间空间限制
题目要求：
一个大小为n的数组，里面的数都属于范围[0, n-1]，有不确定的重复元素，找到至少一个重复元素，要求O(1)空间和O(n)时间。

采用+n的方式：

[参考博客](http://blog.csdn.net/morewindows/article/details/8212446)

```
int FindRepeatNumberInArray(int *a, int n)  
{  
    for(int i = 0; i < n; i++)  
    {  
        int nRealIndex = a[i] >= n ? a[i] - n : a[i];  
        if (a[nRealIndex] >= n) //这个位置上的值大于n说明已经是第二次访问这个位置了  
            return nRealIndex;  
        else  
            a[nRealIndex] += n;  
    }  
    return NO_REPEAT_FLAG; //数组中没有重复的数  
}  
```

## 不能修改数组内容
待更新......

