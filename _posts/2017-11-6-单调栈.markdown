---
layout: post
title:  "单调栈"
date:   2017-11-06 10:10:00
categories: algorithm
tags: algorithm
---


[单调栈详解](http://www.cnblogs.com/lichen782/p/leetcode_Largest_Rectangle_in_Histogram.html)


## 132 Pattern
[来源](https://leetcode.com/problems/132-pattern/description/)

## 题目描述
Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.

## 解决代码：
```
public class Solution {
    public boolean find132pattern(int[] nums) {
        int len = nums.length;
        int third = -Integer.MAX_VALUE;
        Stack<Integer> s = new Stack<Integer>();
        for(int i=len-1; i>=0; i--) {
            if (nums[i] < third)    return true;
            while((!s.isEmpty()) && (nums[i] > s.peek())) {
                third = s.peek();
                s.pop();
            }
            s.push(nums[i]);
        }
        return false;
    }
```

## Largest Rectangle in a Histogram
[来源](http://acm.hdu.edu.cn/showproblem.php?pid=1506)

## 解决代码：
```
#include <iostream>
#include <algorithm>
#include <string>
#include <map>
#include <cstring>
#include <vector>
#include <stack>
#define MAX 100000 + 100
#define ll long long
using namespace std;
int main(){
    int n;
    ll int a[MAX];
    ll int ans = 0;
    while(cin>>n){
        if(n == 0)  return 0;
        stack<int> s;
        ans = 0;
        for(int i=0; i<n; i++)
            cin >> a[i];
        
        a[n] = 0;
        int i=0;
        while(i <= n){
            if(s.empty() || a[i] >= a[s.top()]) s.push(i++);
            else
            {
                int t = s.top();
                s.pop();
                ans = max(ans, a[t] * (s.empty() ? i : i - s.top() - 1));       
            }
        }
        cout << ans << endl;
        
    }
}
```


## 题目描述：
给出n座大楼的位置以及高度，再给出m个人的位置，查询给出的人的位置所能看到的最大的仰角是多少。 

其实我们应该维护一个相邻两顶点间斜率绝对值单调递增的栈，套路还是单调栈的套路，不过是进出栈的条件变成了斜率的相对大小，然后就是把询问也当建筑物放进去会使代码好写很多，对于每个点记录其左边和右边能看到的最高的建筑物，最后转化一下按询问顺序输出就行了。

## 解决代码：
```
#include<bits/stdc++.h>
#define ll long long
#define pi acos(-1.0)
#define inf 0x3f3f3f3f
using namespace std;
const int MAXN = 200010;
struct P{
    double x, y;
    int id;
    bool operator < (P a) const
    {
        return x < a.x;
    }
}p[MAXN], st[MAXN], L[MAXN], R[MAXN];
//计算向量ca与向量cb的叉积，若cb在ca的逆时针方向，则返回>0，顺时针方向返回<0
//计算斜率
double cross(P a, P b, P c)
{
    return (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
}
double ans[MAXN];
int main()
{
    int T, n, q, kase = 1;
    cin >> T;
    while(T--)
    {
        //输入数据
        scanf("%d", &n);
        for(int i = 1; i <= n; i++)
        {
            scanf("%lf %lf", &p[i].x, &p[i].y);
            p[i].id = 0;
        }
        //查询数据，合并在q中
        scanf("%d", &q);
        for(int i = 1; i <= q; i++)
        {
            scanf("%lf", &p[i + n].x);
            p[i + n].y = 0;
            p[i + n].id = i;
        }
        n += q;
        int top = 0;
        //按位置顺序排序
        sort(p + 1, p + n + 1);
        //处理左边
        //维护一个单调递增的单调栈
        for(int i = 1; i <= n; i++)
        {
            while(top >= 2 && cross(st[top - 1], st[top - 2], p[i]) <= 0) top--;
            L[i] = st[top - 1];
            st[top++] = p[i];
        }
        //处理右边
        top = 0;
        for(int i = n; i >= 1; i--)
        {
            while(top >= 2 && cross(st[top - 1], st[top - 2], p[i]) >= 0) top--;
            R[i] = st[top - 1];
            st[top++] = p[i];
        }
        //计算结果
        for(int i = 1; i <= n; i++)
        {
            if(!p[i].id) continue;      //判断是否是需要查询的点
            //计算左边的角度，L[i]为P[i]左边最高
            ans[p[i].id] = atan((p[i].x - L[i].x) / L[i].y);
            //计算右边的角度
            ans[p[i].id] += atan((R[i].x - p[i].x) / R[i].y);
        }
        //输出结果
        printf("Case #%d:\n", kase++);
        for(int i = 1; i <= q; i++)
        printf("%.8lf\n", ans[i] * 180.0 / pi);
    }
    return 0;
}

```


## 题目：乱发结
## 解决代码：
```
#include <iostream>
#include <algorithm>
#include <string>
#include <map>
#include <cstring>
#include <vector>
#include <stack>
#define MAX 80000 + 100
#define ll long long
using namespace std;
int main(){
    int n;
    ll int a[MAX];
    ll int ans = 0;
    while(cin>>n){
        if(n == 0)  return 0;
        stack<ll int> s;
        ans = 0;
        cin >> a[0];
        s.push(a[0]);
        for(int i=1; i<n; i++){
            cin >> a[i];
            while(s.size() && s.top() < a[i])   s.pop();
            ans += s.size();
            s.push(a[i]);
        }
        cout << ans << endl;
        
    }
}
```
